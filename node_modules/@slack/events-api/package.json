{
  "_from": "@slack/events-api",
  "_id": "@slack/events-api@2.1.1",
  "_inBundle": false,
  "_integrity": "sha512-sHS4ZDdNa3JMdzgi1tfJFk6tFD05r4z9UPaYE6dCC36PpZ/7MXxBGwp19M2c+u6gXnv6QN2xz088tkoVP4MOxA==",
  "_location": "/@slack/events-api",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "escapedName": "@slack%2fevents-api",
    "fetchSpec": "latest",
    "name": "@slack/events-api",
    "raw": "@slack/events-api",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@slack",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@slack/events-api/-/events-api-2.1.1.tgz",
  "_shasum": "d4a9487a90020340b130be823a11339df9d6bd7b",
  "_shrinkwrap": null,
  "_spec": "@slack/events-api",
  "_where": "E:\\Development\\orangecone",
  "author": {
    "email": "aoberoi@gmail.com",
    "name": "Ankur Oberoi"
  },
  "bin": {
    "slack-verify": "dist/verify.js"
  },
  "bugs": {
    "url": "https://github.com/slackapi/node-slack-events-api/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.6.1",
    "express": "^4.0.0",
    "lodash.isstring": "^4.0.1",
    "raw-body": "^2.3.3",
    "tsscmp": "^1.0.6",
    "yargs": "^6.6.0"
  },
  "deprecated": false,
  "description": "Slack Events API module",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-eslint": "^7.1.1",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-es2016": "^6.16.0",
    "chai": "^4.1.2",
    "codecov": "^3.0.4",
    "eslint": "^3.12.2",
    "eslint-config-airbnb": "^13.0.0",
    "eslint-config-airbnb-base": "^11.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.8.0",
    "express": "^4.14.0",
    "get-random-port": "0.0.1",
    "lodash.isfunction": "^3.0.8",
    "mocha": "^5.2.0",
    "nop": "^1.0.0",
    "nyc": "^12.0.2",
    "proxyquire": "^1.7.10",
    "sinon": "^4.5.0",
    "superagent": "^3.3.1",
    "uncaughtException": "^1.0.0"
  },
  "engines": {
    "node": ">=4.2.0"
  },
  "files": [
    "dist/**/*"
  ],
  "homepage": "https://github.com/slackapi/node-slack-events-api#readme",
  "license": "MIT",
  "main": "dist/index.js",
  "name": "@slack/events-api",
  "optionalDependencies": {
    "express": "^4.0.0"
  },
  "readme": "# Slack Events API adapter for Node\n\n[![Build Status](https://travis-ci.org/slackapi/node-slack-events-api.svg?branch=master)](https://travis-ci.org/slackapi/node-slack-events-api)\n[![codecov](https://codecov.io/gh/slackapi/node-slack-events-api/branch/master/graph/badge.svg)](https://codecov.io/gh/slackapi/node-slack-events-api)\n\nBuild your Slack apps by reacting to messages, emojis, files, and many more types of interesting\nevents in the [Events API](https://api.slack.com/events-api). This package will help you start\nwith sensible and secure defaults.\n\nThe adapter gives you a simple and highly configurable Node-style [EventEmitter](https://nodejs.org/dist/latest/docs/api/events.html#events_class_eventemitter) to attach functions\nto handle events.\n\n*  [Installation](#installation)\n*  [Configuration](#configuration)\n*  [Usage](#usage)\n*  [Examples](#examples)\n*  [Reference Documentation](#reference_documentation)\n*  [Support](#support)\n\n---\n\n## Installation\n\n```\n$ npm install --save @slack/events-api\n```\n\n## Configuration\n\nGet started by [creating a Slack App](https://api.slack.com/apps/new) if you haven't already.\nOn the **Basic Information** page, in the section for **App Credentials**, note the\n**Signing Secret**. You will need it to initialize the adapter.\n\n> ‚ö†Ô∏è As of `v2.0.0`, the Events API adapter no longer accepts legacy verification tokens.\nYou must pass a signing secret [to verify requests from Slack](https://api.slack.com/docs/verifying-requests-from-slack).\n\nSelect the **Event Subscriptions** feature, and enable it. Input a **Request URL**.\n\n![Configuring a request URL](support/event-subscriptions.gif)\n\n<details>\n<summary><strong>What's a request URL? How can I get one for development?</strong></summary>\n\nSlack will send requests to your app server each time an event from a subscription is triggered.\nIn order to reach your server, you have to tell Slack where your app is listening for those\nrequests. This location is the request URL.\n\nIf you're just getting started with development, you may not have a publicly accessible URL for\nyour app. We recommend using a development proxy, such as [ngrok](https://ngrok.com/) or\n[localtunnel](https://localtunnel.github.io/www/), to generate a URL that can forward requests to\nyour local machine. Once you've installed the development proxy of your choice, run it to begin\nforwarding requests to a specific port (for example, 3000).\n\n> ngrok: `ngrok http 3000`\n\n> localtunnel: `lt --port 3000`\n\n![Starting a development proxy](support/ngrok.gif)\n\nThe output should show you a newly generated URL that you can use (ngrok will actually show you two\nand we recommend the one that begins with \"https\"). Let's call this the base URL (for example,\n`https://e0e88971.ngrok.io`)\n\nTo create the request URL, we add the path where our app listens for events onto the end of\nthe base URL. If you are using the built-in HTTP server it is set to `/slack/events`. In this\nexample the request URL would be `https://e0e88971.ngrok.io/slack/events`. If you are using the\nExpress middlware, you can set whichever path you like, just remember to make the path you mount the\nmiddleware into the application the same as the one you configure in Slack.\n</details>\n\n<br/>\n\n<details>\n<summary><strong>I'm getting an error about the `challenge` parameter. Help?</strong></summary>\n\nBefore you can save the subscription, your app will need to respond to a challenge at your chosen\nrequest URL. I know what you're thinking: ü§î _How can I respond if I haven't written my app yet?_\nThis package comes with a command line tool which starts a server that can properly respond to the\nchallenge. If you're using the development proxy as described above, you can run the tool from\ninside your project directory (after this package has been installed) with the following command:\n\n```bash\n./node_modules/.bin/slack-verify --secret <signing_secret> [--path=/slack/events] [--port=3000]\n```\n\nYou'll need to substitute your own signing secret for `<signing_secret>`. The path and port values\nare optional. If your request URL includes a different path, you should specify it with\n`--path=/my/path/here` (no brackets). Similarly, if your development proxy is forwarding requests to\na different port, you should specify it with `--port=8888` (no brackets). If you're using the\ndefaults, you can ignore everything after `<signing_secret>`. You should **only use the command line\ntool in development**. If your app is up and running, the adapter will automatically respond to\nchallenges.\n\nYou might need to click \"Retry\" in the Request URL input to ask Slack to send the challenge\nagain. Once the request URL is verified, you can terminate the two processes (command line tool and\ndevelopment server) with Ctrl+C.\n</details>\n\n<br/>\n\nAdd each event type your app requires. In the tables below, you may add Workspace events and Bot events.\nOnce you've selected all the event types, be sure to **Save Changes**.\n\nLastly, if you've added event types that require scopes your app did not previously have, you'll need to\nreinstall the app into the workspace(s) from where you'd like Slack to send your app new events. To quickly\ninstall the app to your Development Workspace, visit the **Install App** page.\n\n## Usage\n\nThe easiest way to start using the Events API is by using the built-in HTTP server.\n\n```javascript\n// Initialize using signing secret from environment variables\nconst { createEventAdapter } = require('@slack/events-api');\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET);\nconst port = process.env.PORT || 3000;\n\n// Attach listeners to events by Slack Event \"type\". See: https://api.slack.com/events/message.im\nslackEvents.on('message', (event) => {\n  console.log(`Received a message event: user ${event.user} in channel ${event.channel} says ${event.text}`);\n});\n\n// Handle errors (see `errorCodes` export)\nslackEvents.on('error', console.error);\n\n// Start a basic HTTP server\nslackEvents.start(port).then(() => {\n  console.log(`server listening on port ${port}`);\n});\n```\n\n**NOTE**: To use the example above, you need to add a Workspace Event such as `message.im` in the Event\nSubscriptions section of your Slack App configuration settings.\n\n### Using with Express\n\nFor usage within an existing Express application, you can route requests to the adapter's express\nmiddleware by calling the `expressMiddleware()` method;\n\n```javascript\nconst http = require('http');\n\n// Initialize using signing secret from environment variables\nconst { createEventAdapter } = require('@slack/events-api');\nconst slackEvents = createEventAdapter(process.env.SLACK_SIGNING_SECRET);\nconst port = process.env.PORT || 3000;\n\n// Initialize an Express application\nconst express = require('express');\nconst app = express();\n\n// Mount the event handler on a route\n// NOTE: you must mount to a path that matches the Request URL that was configured earlier\napp.use('/slack/events', slackEvents.expressMiddleware());\n\n// Attach listeners to events by Slack Event \"type\". See: https://api.slack.com/events/message.im\nslackEvents.on('message', (event)=> {\n  console.log(`Received a message event: user ${event.user} in channel ${event.channel} says ${event.text}`);\n});\n\n// Handle errors (see `errorCodes` export)\nslackEvents.on('error', console.error);\n\n// Start the express application\nhttp.createServer(app).listen(port, () => {\n  console.log(`server listening on port ${port}`);\n});\n```\n\n> ‚ö†Ô∏è As of `v2.0.0`, the Events API adapter parses raw request bodies while performing request signing verification. This means apps no longer need to use `body-parser` middleware to parse JSON-encoded requests.\n\n**NOTE**: To use the example above, you need to add a Team Event such as `message.im` in the Event\nSubscriptions section of your Slack App configuration settings.\n\n## Examples\n\n*  [Greet And React](examples/greet-and-react) - A ready to run sample app that listens for messages and\n   emoji reactions, and responds to them. It is built on top of the [Express](https://expressjs.com) web framework. It also implements [OAuth](https://api.slack.com/docs/oauth) to demonstate how an app can handle\n   installation to additional workspaces and be structured to handle events from multiple workspaces.\n\n## Reference Documentation\n\nTo learn more, see the [reference documentation](docs/reference.md).\n\n## Support\n\nNeed help? Join the [Bot Developer Hangout](https://community.botkit.ai) team and talk to us in\n[#slack-api](https://dev4slack.slack.com/messages/slack-api/).\n\nYou can also [create an Issue](https://github.com/slackapi/node-slack-events-api/issues/new)\nright here on GitHub.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/slackapi/node-slack-events-api.git"
  },
  "scripts": {
    "build": "babel src -d dist --source-maps both",
    "coverage": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "lint": "eslint src",
    "lint:test": "eslint test",
    "prepare": "npm run build",
    "test": "npm run lint && npm run build && npm run lint:test && npm run test:nyc",
    "test:mocha": "mocha test/**/*.js",
    "test:nyc": "nyc --reporter=html mocha test/**/*.js"
  },
  "version": "2.1.1"
}
