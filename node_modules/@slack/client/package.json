{
  "_from": "@slack/client",
  "_id": "@slack/client@4.8.0",
  "_inBundle": false,
  "_integrity": "sha512-c4PKsRMtTp3QVYg+6cNqqxbU/50gnYfMlZgPCGUuMDMm9mkx50y0PEuERcVyLIe5j61imrhQx9DoNIfybEhTTw==",
  "_location": "/@slack/client",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@slack%2fclient",
    "fetchSpec": "latest",
    "name": "@slack/client",
    "raw": "@slack/client",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@slack",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@slack/client/-/client-4.8.0.tgz",
  "_shasum": "265606f1cebae1d72f3fdd2cdf7cf1510783dde4",
  "_shrinkwrap": null,
  "_spec": "@slack/client",
  "_where": "E:\\Development\\orangecone",
  "author": {
    "name": "Slack Technologies, Inc."
  },
  "bugs": {
    "url": "https://github.com/slackapi/node-slack-sdk/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/form-data": "^2.2.1",
    "@types/is-stream": "^1.1.0",
    "@types/loglevel": "^1.5.3",
    "@types/node": ">=6.0.0",
    "@types/p-cancelable": "^0.3.0",
    "@types/p-queue": "^2.3.1",
    "@types/p-retry": "^1.0.1",
    "@types/retry": "^0.10.2",
    "@types/ws": "^5.1.1",
    "axios": "^0.18.0",
    "eventemitter3": "^3.0.0",
    "finity": "^0.5.4",
    "form-data": "^2.3.1",
    "is-stream": "^1.1.0",
    "loglevel": "^1.6.1",
    "object.entries": "^1.0.4",
    "object.getownpropertydescriptors": "^2.0.3",
    "object.values": "^1.0.4",
    "p-cancelable": "^0.3.0",
    "p-queue": "^2.3.0",
    "p-retry": "^2.0.0",
    "retry": "^0.12.0",
    "ws": "^5.2.0"
  },
  "deprecated": false,
  "description": "Slack Developer Kit - official clients for the Web API, RTM API, and Incoming Webhooks",
  "devDependencies": {
    "@aoberoi/capture-console": "^1.0.0",
    "@types/chai": "^4.1.2",
    "@types/mocha": "^2.2.48",
    "busboy": "^0.2.14",
    "chai": "^4.1.2",
    "codecov": "^3.0.0",
    "husky": "^0.14.3",
    "jsdoc-to-markdown": "^4.0.1",
    "lint-staged": "^6.1.0",
    "mocha": "^5.0.0",
    "nock": "^9.1.6",
    "nyc": "^11.4.1",
    "p-is-promise": "^1.1.0",
    "shx": "^0.2.2",
    "sinon": "^4.2.2",
    "source-map-support": "^0.5.3",
    "ts-jsdoc": "^3.0.0",
    "ts-node": "^4.1.0",
    "tslint": "^5.9.1",
    "tslint-config-airbnb": "^5.5.0",
    "typescript": "^2.7.1",
    "typings-tester": "^0.3.1"
  },
  "engines": {
    "node": ">= 6.9.0",
    "npm": ">= 3.10.8"
  },
  "files": [
    "dist/**/*"
  ],
  "homepage": "https://github.com/slackapi/node-slack-sdk#readme",
  "keywords": [
    "api",
    "bot",
    "chatbot",
    "client",
    "http",
    "rtm-api",
    "slack",
    "web-api",
    "websockets"
  ],
  "license": "MIT",
  "main": "./dist/index.js",
  "name": "@slack/client",
  "optionalDependencies": {},
  "readme": "# Node Slack SDK\n\n[![Build Status](https://travis-ci.org/slackapi/node-slack-sdk.svg?branch=master)](https://travis-ci.org/slackapi/node-slack-sdk)\n[![codecov](https://codecov.io/gh/slackapi/node-slack-sdk/branch/master/graph/badge.svg)](https://codecov.io/gh/slackapi/node-slack-sdk)\n[![npm (scoped)](https://img.shields.io/npm/v/@slack/client.svg)](https://www.npmjs.com/package/@slack/client)\n\nVisit the [full documentation](https://slackapi.github.io/node-slack-sdk) for all the lovely details.\n\nSo you want to build a Slack app with Node.js? We've got you covered. This package is aimed at making\nbuilding Slack apps ridiculously easy. It helps you build on all aspects of the Slack platform, from dropping\nnotifications in channels to fully interactive bots.\n\n**Upgrading from version 3?** The\n[migration guide](https://github.com/slackapi/node-slack-sdk/wiki/Migration-Guide-for-v4) has all the information you\nneed to bring your app up to speed.\n\n## Requirements\n\nThis package supports Node v6 and higher. It's highly recommended to use\n[the latest LTS version of node](https://github.com/nodejs/Release#release-schedule), and the documentation is written\nusing syntax and features from that version.\n\n## Installation\n\nUse npm to install the package and save it to your `package.json`:\n\n```shell\n$ npm install @slack/client\n```\n\n## Features\n\nThe Slack platform offers several APIs to build apps. Each API delivers part of the capabilities\nfrom the platform, with a range of complexity and functionality, so that you can pick the one that\nfits for your app.\n\n| Slack API    | Outgoing | Incoming | NPM Package         | Documentation     |\n|--------------|:--------:|:--------:|---------------------|-------------------|\n| Web API      | ⬆️        | ⬜️       | `@slack/client`     | [Guide](https://slackapi.github.io/node-slack-sdk/web_api) |\n| RTM API      | ⬆️        | ⬇️        | `@slack/client`     | [Guide](https://slackapi.github.io/node-slack-sdk/rtm_api) |\n| Incoming Webhooks | ⬆️   | ⬜️       | `@slack/client`     | [Guide](https://slackapi.github.io/node-slack-sdk/incoming_webhook) |\n| Events API   | ⬜️       | ⬇️        | `@slack/events-api` | [README](https://github.com/slackapi/node-slack-events-api) |\n| Interactive Messages | ⬜️ | ⬇️      | `@slack/interactive-messages` | [README](https://github.com/slackapi/node-slack-interactive-messages) |\n\n**Just starting out?** We suggest starting at the\n[Getting Started guide](https://slackapi.github.io/node-slack-sdk/getting_started) which will walk you\nthrough building your first Slack app using Node.js.\n\n**Not sure about which APIs are right for your app?** Read our\n[helpful blog post](https://medium.com/slack-developer-blog/getting-started-with-slacks-apis-f930c73fc889)\nthat explains and compares the options. If you're still not sure,\n[reach out for help](#getting-help) and our community can guide you.\n\n**Building a workspace app?** The `WebClient` can automatically [handle token rotation](https://slackapi.github.io/node-slack-sdk/web_api#using-refresh-tokens) for your app. [Learn more](https://api.slack.com/docs/rotating-and-refreshing-credentials#why) about why you should enable token expiration (hint: its required for App Directory distribution).\n\n## Examples\n\n### Posting a message with Web API\n\nYour app will interact with the Web API through the `WebClient` object, which a top level export\nfrom this package. At a minimum, you need to instantiate it with a token. The example below shows\nhow to post a message into a channel, DM, MPDM, or group. This will require either the\n`chat:user:write` or `chat:bot:write` scopes.\n\n```javascript\nconst { WebClient } = require('@slack/client');\n\n// An access token (from your Slack app or custom integration - xoxa, xoxp, or xoxb)\nconst token = process.env.SLACK_TOKEN;\n\nconst web = new WebClient(token);\n\n// This argument can be a channel ID, a DM ID, a MPDM ID, or a group ID\nconst conversationId = 'C1232456';\n\n// See: https://api.slack.com/methods/chat.postMessage\nweb.chat.postMessage({ channel: conversationId, text: 'Hello there' })\n  .then((res) => {\n    // `res` contains information about the posted message\n    console.log('Message sent: ', res.ts);\n  })\n  .catch(console.error);\n```\n\nThe `WebClient` object makes it simple to call any of the\n[**over 130 Web API methods**](https://api.slack.com/methods). See the\n[guide](http://slackapi.github.io/node-slack-sdk/web_api) for details.\n\n### Posting a message with the Real-Time Messaging API\n\nYour app will interact with the RTM API through the `RTMClient` object, which is a top level\nexport from this package. At a minimum, you need to instantiate it with a token, usually a\nbot token.\n\n```javascript\nconst { RTMClient } = require('@slack/client');\n\n// An access token (from your Slack app or custom integration - usually xoxb)\nconst token = process.env.SLACK_TOKEN;\n\n// The client is initialized and then started to get an active connection to the platform\nconst rtm = new RTMClient(token);\nrtm.start();\n\n// This argument can be a channel ID, a DM ID, a MPDM ID, or a group ID\nconst conversationId = 'C1232456';\n\n// The RTM client can send simple string messages\nrtm.sendMessage('Hello there', conversationId)\n  .then((res) => {\n    // `res` contains information about the posted message\n    console.log('Message sent: ', res.ts);\n  })\n  .catch(console.error);\n```\n\nThe `RTMClient` object makes it simple to listen for [events](https://api.slack.com/rtm#events) from a workspace\nand send simple messages to a workspace. See the\n[guide](http://slackapi.github.io/node-slack-sdk/rtm_api) for details.\n\n## Posting a message with Incoming Webhooks\n\n[Incoming webhooks](https://api.slack.com/incoming-webhooks) are an easy way to send notifications\nto a Slack channel with a minimum of setup. You'll need a webhook URL from a Slack app or a custom\nintegration to use the `IncomingWebhook` class.\n\n```javascript\nconst { IncomingWebhook } = require('@slack/client');\nconst url = process.env.SLACK_WEBHOOK_URL;\nconst webhook = new IncomingWebhook(url);\n\n// Send simple text to the webhook channel\nwebhook.send('Hello there', function(err, res) {\n    if (err) {\n        console.log('Error:', err);\n    } else {\n        console.log('Message sent: ', res);\n    }\n});\n```\n\n## Getting Help\n\nIf you get stuck, we're here to help. The following are the best ways to get assistance working through your issue:\n\n  * [Issue Tracker](http://github.com/slackapi/node-slack-sdk/issues) for questions, feature\n    requests, bug reports and general discussion related to this package.\n  * [Email us](mailto:developers@slack.com) in Slack developer support: `developers@slack.com`\n  * [Bot Developers Hangout](https://community.botkit.ai/): a Slack community for developers\n    building all types of bots. You can find the maintainers and users of this package in **#sdk-node-slack-sdk**.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/slackapi/node-slack-sdk.git"
  },
  "scripts": {
    "build": "npm run build:clean && tsc",
    "build:clean": "shx rm -rf ./dist ./coverage ./.nyc_output",
    "coverage": "codecov",
    "docs": "node support/jsdoc-to-markdown.js",
    "docs:jsdoc": "ts2jsdoc",
    "lint": "tslint --project .",
    "precommit": "lint-staged",
    "prepublish": "npm run build",
    "prepush": "npm run build",
    "test": "npm run build && npm run test:spec && npm run test:integration",
    "test:integration": "mocha --opts test/mocha.opts test/typescript/test.ts",
    "test:spec": "nyc mocha --opts src/mocha.opts src/*.spec.js src/**/*.spec.js"
  },
  "types": "./dist/index.d.ts",
  "version": "4.8.0"
}
